# FASE 6: GitHub Actions CI/CD Pipeline
# Automated deployment workflow for multiple environments and platforms

name: Deploy to Production

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  
  pull_request:
    branches:
      - main
      - master
    types: [opened, synchronize, reopened]
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      platform:
        description: 'Deployment platform'
        required: true
        default: 'firebase'
        type: choice
        options:
          - firebase
          - vercel
          - docker

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  # ===============================
  # QUALITY CHECKS
  # ===============================
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run type checking
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test
        continue-on-error: true

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            out/
          retention-days: 1

  # ===============================
  # SECURITY SCAN
  # ===============================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # ===============================
  # STAGING DEPLOYMENT
  # ===============================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    environment:
      name: staging
      url: https://staging-metrica.vercel.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --production

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          NODE_ENV: staging
          NEXT_PUBLIC_ENV: staging

      - name: Run staging health checks
        run: |
          sleep 30
          curl -f https://staging-metrica.vercel.app/api/health || exit 1
        continue-on-error: true

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===============================
  # PRODUCTION DEPLOYMENT
  # ===============================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    
    environment:
      name: production
      url: https://metrica-dip.com
    
    strategy:
      matrix:
        platform: ${{ github.event.inputs.platform && fromJson('["' + github.event.inputs.platform + '"]') || '["firebase"]' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --production

      # Firebase Deployment
      - name: Deploy to Firebase
        if: matrix.platform == 'firebase'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
          channelId: live
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: production

      # Vercel Deployment
      - name: Deploy to Vercel
        if: matrix.platform == 'vercel'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: production

      # Docker Deployment
      - name: Set up Docker Buildx
        if: matrix.platform == 'docker'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        if: matrix.platform == 'docker'
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: matrix.platform == 'docker'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/metrica-app:latest
            ${{ secrets.DOCKER_REGISTRY }}/metrica-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_ENV=production

      - name: Run production health checks
        run: |
          sleep 60
          if [ "${{ matrix.platform }}" == "firebase" ]; then
            curl -f https://metrica-dip.com/api/health || exit 1
          elif [ "${{ matrix.platform }}" == "vercel" ]; then
            curl -f https://metrica-dip.vercel.app/api/health || exit 1
          fi
        continue-on-error: true

      - name: Create release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            ${{ github.event.head_commit.message }}
            
            ## Deployment
            - Platform: ${{ matrix.platform }}
            - Environment: production
            - Commit: ${{ github.sha }}
            - Deployed at: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üöÄ Production deployment successful!
            Platform: ${{ matrix.platform }}
            Commit: ${{ github.sha }}
            URL: https://metrica-dip.com
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ‚ùå Production deployment failed!
            Platform: ${{ matrix.platform }}
            Commit: ${{ github.sha }}
            Please check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===============================
  # POST-DEPLOYMENT MONITORING
  # ===============================
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: Wait for deployment to stabilize
        run: sleep 300  # 5 minutes

      - name: Run comprehensive health checks
        run: |
          echo "Running comprehensive health checks..."
          
          # Basic availability
          curl -f https://metrica-dip.com/ || exit 1
          
          # API health
          curl -f https://metrica-dip.com/api/health || exit 1
          
          # Performance check (response time < 3s)
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' https://metrica-dip.com/)
          echo "Response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )); then
            echo "Response time too high: ${RESPONSE_TIME}s"
            exit 1
          fi
          
          echo "All health checks passed!"

      - name: Monitor for 30 minutes
        run: |
          echo "Starting 30-minute monitoring..."
          for i in {1..6}; do
            sleep 300  # 5 minutes
            curl -f https://metrica-dip.com/api/health || echo "Health check $i failed"
            echo "Health check $i completed"
          done
          echo "30-minute monitoring completed"
        continue-on-error: true

  # ===============================
  # ROLLBACK (Manual Trigger)
  # ===============================
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    
    steps:
      - name: Checkout previous version
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.rollback_sha || 'HEAD~1' }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install and build
        run: |
          npm ci
          npm run build

      - name: Deploy rollback
        run: |
          echo "Deploying rollback version..."
          # Add rollback deployment logic here
          
      - name: Verify rollback
        run: |
          sleep 60
          curl -f https://metrica-dip.com/api/health || exit 1

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "üîÑ Emergency rollback completed",
              "attachments": [
                {
                  "color": "warning",
                  "fields": [
                    {
                      "title": "Rollback SHA",
                      "value": "${{ github.event.inputs.rollback_sha || 'HEAD~1' }}",
                      "short": true
                    },
                    {
                      "title": "Triggered by",
                      "value": "${{ github.actor }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}