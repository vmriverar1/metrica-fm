"use strict";exports.id=818,exports.ids=[818],exports.modules={70818:(t,e,a)=>{a.d(e,{Yy:()=>y});var i=a(47687),s=a(79523),r=a(73801),n=a(31075),o=a(79748),l=a.n(o),c=a(33873),h=a.n(c),u=a(55511),d=a.n(u),p=a(94735);let g={sourceDir:"public/json",backupDir:"data/backups",frequency:"daily",retentionDays:30,maxBackups:50,enableCompression:!1,enableEncryption:!1,enableVerification:!0,excludePatterns:["*.tmp","*.lock","node_modules"],includePatternsOnly:[]};class m extends p.EventEmitter{constructor(t={},e,a){super(),this.activeJobs=new Map,this.scheduleTimers=new Map,this.backupHistory=[],this.lastBackupMetadata=new Map,this.config={...g,...t},this.fileManager=e||new i.a5,this.logger=a||new n.Fz({logDir:h().join(this.config.backupDir,"logs")}),this.initializeBackupManager()}async initializeBackupManager(){try{await l().mkdir(this.config.backupDir,{recursive:!0}),await l().mkdir(h().join(this.config.backupDir,"metadata"),{recursive:!0}),await l().mkdir(h().join(this.config.backupDir,"temp"),{recursive:!0}),await this.loadBackupHistory(),await this.loadScheduledJobs(),await this.logger.info("backup","BackupManager initialized successfully"),this.emit("initialized")}catch(t){throw await this.logger.error("backup","Failed to initialize BackupManager",t),t}}async createFullBackup(t="manual"){let e=this.generateBackupId(),a=new Date().toISOString(),i=Date.now(),s={id:e,timestamp:a,type:"full",status:"in_progress",sourceDir:this.config.sourceDir,backupPath:h().join(this.config.backupDir,`full_${e}`),fileCount:0,totalSize:0,duration:0,checksum:"",encrypted:this.config.enableEncryption,compressed:this.config.enableCompression,version:"1.0.0"};try{await this.logger.info("backup",`Starting full backup: ${e}`,{name:t,backupId:e}),this.emit("backup-started",s),await l().mkdir(s.backupPath,{recursive:!0});let a=await this.getFilesToBackup();s.fileCount=a.length;let r=0;for(let t of a){let e=h().join(this.config.sourceDir,t),a=h().join(s.backupPath,t);await l().mkdir(h().dirname(a),{recursive:!0}),await l().copyFile(e,a);let i=await l().stat(a);r+=i.size,this.emit("file-backed-up",{file:t,size:i.size})}if(s.totalSize=r,s.duration=Date.now()-i,s.checksum=await this.generateBackupChecksum(s.backupPath),this.config.enableCompression&&await this.compressBackup(s),this.config.enableEncryption&&this.config.encryptionKey&&await this.encryptBackup(s),this.config.enableVerification&&!await this.verifyBackupIntegrity(s))throw Error("Backup integrity verification failed");return s.status="completed",await this.saveBackupMetadata(s),this.backupHistory.push(s),this.lastBackupMetadata.set("full",s),await this.cleanupOldBackups(),await this.logger.info("backup",`Full backup completed: ${e}`,{fileCount:s.fileCount,totalSize:s.totalSize,duration:s.duration}),this.emit("backup-completed",s),s}catch(t){s.status="failed",s.duration=Date.now()-i,await this.logger.error("backup",`Full backup failed: ${e}`,t,{backupId:e,error:t.message});try{await l().rm(s.backupPath,{recursive:!0,force:!0})}catch{}throw this.emit("backup-failed",s,t),t}}async createIncrementalBackup(t="incremental"){let e=this.lastBackupMetadata.get("full");if(!e)throw Error("No full backup found. Create a full backup first.");let a=this.generateBackupId(),i=new Date().toISOString(),s=Date.now(),r={id:a,timestamp:i,type:"incremental",status:"in_progress",sourceDir:this.config.sourceDir,backupPath:h().join(this.config.backupDir,`incremental_${a}`),fileCount:0,totalSize:0,duration:0,checksum:"",encrypted:this.config.enableEncryption,compressed:this.config.enableCompression,version:"1.0.0",parentBackupId:e.id,changes:{added:[],modified:[],deleted:[]}};try{await this.logger.info("backup",`Starting incremental backup: ${a}`,{name:t,backupId:a,parentBackup:e.id}),this.emit("backup-started",r);let i=await this.detectChanges(e.timestamp);r.changes=i,await l().mkdir(r.backupPath,{recursive:!0});let n=[...i.added,...i.modified];r.fileCount=n.length;let o=0;for(let t of n){let e=h().join(this.config.sourceDir,t),a=h().join(r.backupPath,t);try{await l().access(e)}catch{continue}await l().mkdir(h().dirname(a),{recursive:!0}),await l().copyFile(e,a);let i=await l().stat(a);o+=i.size}if(i.deleted.length>0){let t=h().join(r.backupPath,"deleted-files.json");await l().writeFile(t,JSON.stringify(i.deleted,null,2))}return r.totalSize=o,r.duration=Date.now()-s,r.checksum=await this.generateBackupChecksum(r.backupPath),r.status="completed",await this.saveBackupMetadata(r),this.backupHistory.push(r),this.lastBackupMetadata.set("incremental",r),await this.logger.info("backup",`Incremental backup completed: ${a}`,{fileCount:r.fileCount,changesDetected:{added:i.added.length,modified:i.modified.length,deleted:i.deleted.length}}),this.emit("backup-completed",r),r}catch(t){r.status="failed",r.duration=Date.now()-s,await this.logger.error("backup",`Incremental backup failed: ${a}`,t);try{await l().rm(r.backupPath,{recursive:!0,force:!0})}catch{}throw this.emit("backup-failed",r,t),t}}async restoreFromBackup(t){let e=Date.now();try{await this.logger.info("backup",`Starting restore from backup: ${t.backupId}`,t);let a=await this.getBackupMetadata(t.backupId);if(!a)throw Error(`Backup not found: ${t.backupId}`);if(t.verifyIntegrity&&!await this.verifyBackupIntegrity(a))throw Error("Backup integrity verification failed");await l().mkdir(t.targetDir,{recursive:!0});let i=t.selectiveRestore||await this.getBackupFileList(a),s=0;for(let e of i){let i=h().join(a.backupPath,e),r=h().join(t.targetDir,e);try{if(await l().access(i),await l().mkdir(h().dirname(r),{recursive:!0}),!t.overwrite)try{await l().access(r);continue}catch{}if(await l().copyFile(i,r),t.preserveTimestamps){let t=await l().stat(i);await l().utimes(r,t.atime,t.mtime)}s++,this.emit("file-restored",{file:e,targetPath:r})}catch(t){await this.logger.warn("backup",`Failed to restore file: ${e}`,{error:t.message})}}let r=Date.now()-e;return await this.logger.info("backup",`Restore completed from backup: ${t.backupId}`,{filesRestored:s,duration:r}),this.emit("restore-completed",{backupId:t.backupId,filesRestored:s,duration:r}),!0}catch(e){throw await this.logger.error("backup",`Restore failed from backup: ${t.backupId}`,e),this.emit("restore-failed",t.backupId,e),e}}scheduleBackup(t){let e=this.generateJobId(),a={id:e,...t};return this.activeJobs.set(e,a),t.enabled&&this.activateJob(a),this.logger.info("backup",`Backup job scheduled: ${e}`,{name:t.name,schedule:t.schedule}),e}activateJob(t){let e=this.calculateNextRun(t.schedule);t.nextRun=e.toISOString();let a=setTimeout(async()=>{try{await this.executeScheduledJob(t)}catch(e){await this.logger.error("backup",`Scheduled job failed: ${t.id}`,e)}t.enabled&&this.activateJob(t)},e.getTime()-Date.now());this.scheduleTimers.set(t.id,a)}async executeScheduledJob(t){t.lastRun=new Date().toISOString();try{let e;if("daily"===t.config.frequency||"weekly"===t.config.frequency||"monthly"===t.config.frequency)e=await this.createFullBackup(t.name);else try{e=await this.createIncrementalBackup(t.name)}catch(a){e=await this.createFullBackup(t.name)}t.metadata=e}catch(e){throw await this.logger.error("backup",`Scheduled backup failed: ${t.name}`,e),e}}async getFilesToBackup(){return(await this.getAllFiles(this.config.sourceDir)).filter(t=>!this.config.excludePatterns.some(e=>this.matchPattern(t,e))&&(!(this.config.includePatternsOnly.length>0)||this.config.includePatternsOnly.some(e=>this.matchPattern(t,e))))}async getAllFiles(t,e=""){let a=[];for(let i of(await l().readdir(h().join(this.config.sourceDir,e),{withFileTypes:!0}))){let s=h().join(e,i.name);if(i.isFile())a.push(s);else if(i.isDirectory()){let e=await this.getAllFiles(t,s);a.push(...e)}}return a}matchPattern(t,e){return RegExp("^"+e.replace(/\*/g,".*").replace(/\?/g,".")+"$","i").test(t)}async detectChanges(t){let e={added:[],modified:[],deleted:[]},a=new Date(t);for(let t of(await this.getFilesToBackup())){let i=h().join(this.config.sourceDir,t);try{(await l().stat(i)).mtime>a&&e.modified.push(t)}catch{e.deleted.push(t)}}return e}async generateBackupChecksum(t){let e=d().createHash("sha256"),a=await this.getAllFiles(t);for(let i of(a.sort(),a)){let a=h().join(t,i),s=await l().readFile(a);e.update(s)}return e.digest("hex")}async verifyBackupIntegrity(t){try{return await this.generateBackupChecksum(t.backupPath)===t.checksum}catch{return!1}}async saveBackupMetadata(t){let e=h().join(this.config.backupDir,"metadata",`${t.id}.json`);await l().writeFile(e,JSON.stringify(t,null,2))}async getBackupMetadata(t){try{let e=h().join(this.config.backupDir,"metadata",`${t}.json`),a=await l().readFile(e,"utf-8");return JSON.parse(a)}catch{return null}}async loadBackupHistory(){try{let t=h().join(this.config.backupDir,"metadata");for(let e of(await l().readdir(t)))if(e.endsWith(".json"))try{let a=await l().readFile(h().join(t,e),"utf-8"),i=JSON.parse(a);this.backupHistory.push(i),this.lastBackupMetadata.set(i.type,i)}catch(t){await this.logger.warn("backup",`Failed to load backup metadata: ${e}`,{error:t.message})}this.backupHistory.sort((t,e)=>new Date(t.timestamp).getTime()-new Date(e.timestamp).getTime())}catch{}}async loadScheduledJobs(){}async cleanupOldBackups(){let t=new Date;for(let e of(t.setDate(t.getDate()-this.config.retentionDays),this.backupHistory.filter(e=>new Date(e.timestamp)<t||this.backupHistory.length>this.config.maxBackups)))try{await l().rm(e.backupPath,{recursive:!0,force:!0});let t=h().join(this.config.backupDir,"metadata",`${e.id}.json`);await l().unlink(t);let a=this.backupHistory.indexOf(e);a>-1&&this.backupHistory.splice(a,1),await this.logger.info("backup",`Cleaned up old backup: ${e.id}`)}catch(t){await this.logger.warn("backup",`Failed to cleanup backup: ${e.id}`,{error:t.message})}}async compressBackup(t){t.compressed=!1}async encryptBackup(t){t.encrypted=!1}async getBackupFileList(t){return this.getAllFiles(t.backupPath)}calculateNextRun(t){let e=new Date;switch(t){case"hourly":default:return new Date(e.getTime()+36e5);case"daily":let a=new Date(e);return a.setDate(a.getDate()+1),a.setHours(2,0,0,0),a;case"weekly":let i=new Date(e);return i.setDate(i.getDate()+7),i.setHours(2,0,0,0),i}}generateBackupId(){return`backup_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}generateJobId(){return`job_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getBackupStats(){return{totalBackups:this.backupHistory.length,totalSize:this.backupHistory.reduce((t,e)=>t+e.totalSize,0),oldestBackup:this.backupHistory.length>0?this.backupHistory[0].timestamp:"",newestBackup:this.backupHistory.length>0?this.backupHistory[this.backupHistory.length-1].timestamp:"",backupsByType:{full:this.backupHistory.filter(t=>"full"===t.type).length,incremental:this.backupHistory.filter(t=>"incremental"===t.type).length,differential:this.backupHistory.filter(t=>"differential"===t.type).length},averageBackupSize:this.backupHistory.length>0?this.backupHistory.reduce((t,e)=>t+e.totalSize,0)/this.backupHistory.length:0,successRate:this.backupHistory.length>0?this.backupHistory.filter(t=>"completed"===t.status).length/this.backupHistory.length:0,lastSuccessfulBackup:this.backupHistory.filter(t=>"completed"===t.status).slice(-1)[0]?.timestamp||""}}listBackups(t){return t?this.backupHistory.filter(e=>e.type===t):[...this.backupHistory]}async destroy(){for(let t of this.scheduleTimers.values())clearTimeout(t);this.scheduleTimers.clear(),await this.logger.destroy(),this.removeAllListeners()}}let f=new m;a(98370);class w{async initialize(){if(!this.initialized)try{await this.logger.info("system","Initializing JSON CRUD System..."),await this.validator.loadAllSchemas(),this.setupEventListeners(),this.initialized=!0,await this.logger.info("system","JSON CRUD System initialized successfully",{components:{fileManager:"ready",cacheManager:"ready",validator:"ready",logger:"ready",backupManager:"ready"}})}catch(t){throw await this.logger.error("system","Failed to initialize JSON CRUD System",t),t}}setupEventListeners(){this.fileManager.on&&this.fileManager.on("file-written",t=>{this.cacheManager.invalidateFile(t)}),this.fileManager.on&&this.fileManager.on("file-deleted",t=>{this.cacheManager.invalidateFile(t)}),this.cacheManager.on("hit",t=>{this.logger.debug("cache",`Cache hit: ${t}`)}),this.cacheManager.on("miss",t=>{this.logger.debug("cache",`Cache miss: ${t}`)}),this.backupManager.on("backup-completed",async t=>{await this.logger.audit({action:"create",resource:"backup",resourceId:t.id,message:`Backup completed: ${t.type}`,metadata:{fileCount:t.fileCount,totalSize:t.totalSize,duration:t.duration}})})}async readJSON(t,e=!0){let a=Date.now();try{if(e){let e=this.cacheManager.get(t);if(null!==e)return await this.logger.debug("system",`Read from cache: ${t}`),e}let i=await this.fileManager.readJSON(t);e&&this.cacheManager.set(t,i.data,{tags:[this.getFileCategory(t)]});let s=Date.now()-a;return await this.logger.performance({operation:"readJSON",duration:s,timestamp:new Date().toISOString(),success:!0,metadata:{filePath:t,fromCache:!1}}),i.data}catch(i){let e=Date.now()-a;throw await this.logger.performance({operation:"readJSON",duration:e,timestamp:new Date().toISOString(),success:!1,metadata:{filePath:t,error:i.message}}),i}}async writeJSON(t,e,a={}){let i=Date.now(),s={validate:!0,backup:!0,skipCache:!1,...a};try{if(s.validate){let a=this.validator.getSchemaForFile(t);if(a){let i=await this.validator.validate(e,a,{migrationMode:!0,autoFix:!0});if(!i.valid&&"low"===i.stats.compatibilityLevel)throw Error(`Validation failed: ${i.errors.map(t=>t.message).join(", ")}`);i.fixes.length>0&&(e=i.data,await this.logger.info("system",`Applied ${i.fixes.length} auto-fixes to ${t}`))}}if(s.backup&&await this.fileManager.exists(t))try{await this.backupManager.createIncrementalBackup(`auto-${Date.now()}`)}catch(e){await this.logger.warn("system",`Backup failed for ${t}`,{error:e.message})}let a=await this.fileManager.writeJSON(t,e,{createBackup:s.backup,ensureDirectory:!0});s.skipCache||this.cacheManager.invalidateFile(t),await this.logger.audit({action:"update",resource:"json-file",resourceId:t,message:`JSON file updated: ${t}`,etag:a.metadata.etag,metadata:{fileSize:a.metadata.size,validated:s.validate,backed_up:s.backup}});let r=Date.now()-i;await this.logger.performance({operation:"writeJSON",duration:r,timestamp:new Date().toISOString(),success:!0,metadata:{filePath:t,fileSize:a.metadata.size}})}catch(a){let e=Date.now()-i;throw await this.logger.performance({operation:"writeJSON",duration:e,timestamp:new Date().toISOString(),success:!1,metadata:{filePath:t,error:a.message}}),await this.logger.error("system",`Failed to write JSON file: ${t}`,a),a}}async getSystemStats(){return{cache:this.cacheManager.getStats(),backups:this.backupManager.getBackupStats(),validation:this.validator.getValidationStats(),logs:this.logger.getStats()}}async runDiagnostics(){let{runConcurrencyTests:t}=await Promise.resolve().then(a.bind(a,98370));return t()}getFileCategory(t){return t.includes("/pages/")?"pages":t.includes("/dynamic-content/")?"dynamic-content":"unknown"}async shutdown(){await this.logger.info("system","Shutting down JSON CRUD System...");try{this.cacheManager.clear(),await this.backupManager.destroy(),await this.logger.destroy(),this.initialized=!1}catch(t){console.error("Error during system shutdown:",t)}}constructor(){this.fileManager=i.OT,this.cacheManager=s.yk,this.validator=r.Nc,this.logger=n.vF,this.backupManager=f,this.initialized=!1}}let y=new w},73801:(t,e,a)=>{a.d(e,{Nc:()=>p,sx:()=>d});var i=a(94371),s=a.n(i),r=a(14659),n=a.n(r),o=a(79748),l=a.n(o),c=a(33873),h=a.n(c);class u extends Error{constructor(t){super(`Schema '${t}' not found`),this.name="SchemaNotFoundError"}}class d{constructor(){this.schemas=new Map,this.schemaConfigs=new Map,this.defaultOptions={strict:!1,autoFix:!0,allowExtraProperties:!0,skipMissingRequired:!1,generateSuggestions:!0,migrationMode:!0},this.ajv=new(s())({allErrors:!0,verbose:!0,strict:!1,removeAdditional:!1,useDefaults:!0,coerceTypes:!0}),n()(this.ajv),this.setupCustomKeywords()}setupCustomKeywords(){this.ajv.addKeyword({keyword:"flexibleRequired",type:"object",schemaType:"array",compile:t=>function(e,a){let i=[];for(let a of t)a in e||i.push(a);return!!(i.length>0&&a?.parentData?.migrationMode)||0===i.length}}),this.ajv.addKeyword({keyword:"autoNormalize",type:["string","object","array"],schemaType:"object",compile:t=>function(t){return!0}})}async loadSchema(t,e){try{let a=h().resolve(e),i=JSON.parse(await l().readFile(a,"utf-8"));this.ajv.addSchema(i,t),this.schemas.set(t,i);let s={name:t,path:e,strict:!1,required:i.required||[],optional:[],patterns:{}};this.schemaConfigs.set(t,s)}catch(a){throw Error(`Failed to load schema '${t}' from '${e}': ${a.message}`)}}async loadAllSchemas(){let t=h().join(process.cwd(),"data/schemas");for(let e of[{name:"static-page",path:"pages/static-page.schema.json"},{name:"portfolio",path:"dynamic-content/portfolio.schema.json"},{name:"careers",path:"dynamic-content/careers.schema.json"},{name:"newsletter",path:"dynamic-content/newsletter.schema.json"}]){let a=h().join(t,e.path);await this.loadSchema(e.name,a)}}getSchemaForFile(t){let e=t.replace(/^.*\/public\/json\//,"");return e.startsWith("pages/")?"static-page":e.includes("portfolio")?"portfolio":e.includes("careers")?"careers":e.includes("newsletter")?"newsletter":null}async validate(t,e,a={}){let i={...this.defaultOptions,...a},s=JSON.parse(JSON.stringify(t)),r=JSON.parse(JSON.stringify(t)),n={valid:!1,data:r,originalData:s,errors:[],warnings:[],suggestions:[],fixes:[],schema:e,stats:{errorsCount:0,warningsCount:0,fixesApplied:0,compatibilityLevel:"low"}},o=this.ajv.getSchema(e);if(!o)throw new u(e);if(i.autoFix){let t=await this.applyAutoFixes(r,e);n.fixes.push(...t),n.stats.fixesApplied=t.length}let l=o(r);if(n.valid=l,n.data=r,!l&&o.errors){if(n.errors=o.errors,n.stats.errorsCount=o.errors.length,!i.strict){let{errors:t,warnings:e}=this.categorizeErrors(o.errors,i);n.errors=t,n.warnings=e,n.stats.warningsCount=e.length,0===t.length&&(n.valid=!0)}i.generateSuggestions&&(n.suggestions=this.generateSuggestions(o.errors,r))}return n.stats.compatibilityLevel=this.calculateCompatibilityLevel(n),n}async applyAutoFixes(t,e){let a=[],i=this.schemas.get(e);if(!i)return a;if(i.required&&Array.isArray(i.required)){for(let e of i.required)if(!(e in t)&&i.properties&&i.properties[e]){let s=i.properties[e],r=this.getDefaultValue(s);void 0!==r&&(t[e]=r,a.push({path:e,type:"added",newValue:r,description:`Added missing required field '${e}' with default value`}))}}return a.push(...this.normalizeStatsFields(t)),a.push(...this.normalizeIdFields(t)),a.push(...this.normalizeUrlFields(t)),a}normalizeStatsFields(t,e=""){let a=[];if(t&&"object"==typeof t)for(let[i,s]of Object.entries(t)){let r=e?`${e}.${i}`:i;if("stats"===i&&s&&"object"==typeof s&&!Array.isArray(s)){let e=Object.entries(s).map(([t,e])=>({key:t,value:e,label:this.humanizeKey(t)}));t[i]=e,a.push({path:r,type:"converted",oldValue:s,newValue:e,description:"Converted stats object to array format"})}else s&&"object"==typeof s&&a.push(...this.normalizeStatsFields(s,r))}return a}normalizeIdFields(t,e=""){let a=[];if(t&&"object"==typeof t)for(let[i,s]of Object.entries(t)){let r=e?`${e}.${i}`:i;if("id"===i&&"string"!=typeof s&&null!=s){let e=String(s);t[i]=e,a.push({path:r,type:"converted",oldValue:s,newValue:e,description:`Converted ID from ${typeof s} to string`})}else s&&"object"==typeof s&&a.push(...this.normalizeIdFields(s,r))}return a}normalizeUrlFields(t,e=""){let a=[];if(t&&"object"==typeof t)for(let[i,s]of Object.entries(t)){let t=e?`${e}.${i}`:i;("url"===i||i.includes("url")||i.includes("link"))&&"string"==typeof s&&s.startsWith("/")||s&&"object"==typeof s&&a.push(...this.normalizeUrlFields(s,t))}return a}getDefaultValue(t){if(void 0!==t.default)return t.default;switch(t.type){case"string":return"";case"number":case"integer":return 0;case"boolean":return!1;case"array":return[];case"object":return{};default:return}}humanizeKey(t){return t.replace(/([A-Z])/g," $1").replace(/^./,t=>t.toUpperCase()).trim()}categorizeErrors(t,e){let a=[],i=[];for(let s of t){if(e.migrationMode){if("required"===s.keyword&&e.skipMissingRequired){i.push(`Missing required field: ${s.params?.missingProperty||s.instancePath}`);continue}if("additionalProperties"===s.keyword&&e.allowExtraProperties){i.push(`Additional property: ${s.instancePath}/${s.params?.additionalProperty}`);continue}if("type"===s.keyword&&this.isMinorTypeError(s)){i.push(`Type mismatch: ${s.instancePath} (${s.message})`);continue}}a.push(s)}return{errors:a,warnings:i}}isMinorTypeError(t){return["number vs string","object vs array","string vs null"].some(e=>t.message?.toLowerCase().includes(e.toLowerCase()))}generateSuggestions(t,e){let a=[],i=new Set(t.map(t=>t.keyword));for(let e of t)switch(e.keyword){case"required":a.push(`Add missing required field: ${e.params?.missingProperty}`);break;case"type":a.push(`Convert ${e.instancePath} from ${typeof e.data} to ${e.schema}`);break;case"format":"uri"===e.schema?a.push(`Ensure ${e.instancePath} is a valid URL`):"email"===e.schema&&a.push(`Ensure ${e.instancePath} is a valid email`);break;case"pattern":a.push(`${e.instancePath} must match pattern: ${e.schema}`)}return i.has("type")&&a.push("Consider running auto-fix to normalize data types"),i.has("required")&&a.push("Use migration mode to add missing fields gradually"),[...new Set(a)]}calculateCompatibilityLevel(t){let{errorsCount:e,warningsCount:a,fixesApplied:i}=t.stats;return t.valid&&0===e+a?"full":t.valid&&0===e?"high":e<=3&&i>0?"medium":"low"}async validateFile(t,e={}){let a=this.getSchemaForFile(t);if(!a)throw Error(`No schema available for file: ${t}`);let i=JSON.parse(await l().readFile(t,"utf-8"));return this.validate(i,a,e)}getValidationStats(){return{schemasLoaded:this.schemas.size,availableSchemas:Array.from(this.schemas.keys()),defaultOptions:this.defaultOptions}}}let p=new d},79523:(t,e,a)=>{a.d(e,{I8:()=>r,yk:()=>n});var i=a(94735);class s extends i.EventEmitter{constructor(t=1e3,e=3e5){super(),this.maxSize=t,this.defaultTtl=e,this.cache=new Map,this.stats={hits:0,misses:0,evictions:0,invalidations:0},this.cleanupInterval=null,this.DEFAULT_TTL=3e5,this.MAX_SIZE=1e3,this.CLEANUP_INTERVAL=6e4,this.startCleanupTimer()}startCleanupTimer(){this.cleanupInterval=setInterval(()=>{this.cleanupExpired()},this.CLEANUP_INTERVAL)}stopCleanupTimer(){this.cleanupInterval&&(clearInterval(this.cleanupInterval),this.cleanupInterval=null)}normalizeKey(t){return t.toLowerCase().replace(/\\/g,"/")}calculateSize(t){try{return 2*JSON.stringify(t).length}catch{return 1024}}isExpired(t){return Date.now()-t.timestamp>t.ttl}evictLRU(){if(this.cache.size<=this.maxSize)return;let t=null,e=Date.now();for(let[a,i]of this.cache.entries())i.lastAccessed<e&&(e=i.lastAccessed,t=a);t&&(this.cache.delete(t),this.stats.evictions++,this.emit("eviction",t))}get(t){let e=this.normalizeKey(t),a=this.cache.get(e);return a?this.isExpired(a)?(this.cache.delete(e),this.stats.misses++,this.emit("miss",t),this.emit("expired",t),null):(a.lastAccessed=Date.now(),a.accessCount++,this.stats.hits++,this.emit("hit",t),a.data):(this.stats.misses++,this.emit("miss",t),null)}set(t,e,a={}){let i=this.normalizeKey(t),s=Date.now();this.evictLRU();let r={data:e,etag:this.generateEtag(e),timestamp:s,lastAccessed:s,accessCount:1,ttl:a.ttl||this.defaultTtl,tags:a.tags||[]};this.cache.set(i,r),this.emit("set",t,e)}generateEtag(t){let e=a(55511),i=JSON.stringify(t);return e.createHash("md5").update(i).digest("hex")}has(t){let e=this.normalizeKey(t),a=this.cache.get(e);return!!a&&(!this.isExpired(a)||(this.cache.delete(e),!1))}delete(t){let e=this.normalizeKey(t),a=this.cache.delete(e);return a&&this.emit("delete",t),a}invalidate(t){let e,a=0,i=[],s=[];if("string"==typeof t){let a=t.replace(/\*/g,".*").replace(/\?/g,".");e=RegExp(`^${a}$`,"i")}else if(t instanceof RegExp)e=t;else{if("string"==typeof t.pattern){let a=t.pattern.replace(/\*/g,".*").replace(/\?/g,".");e=RegExp(`^${a}$`,"i")}else e=t.pattern;s=t.tags||[]}for(let[t,a]of this.cache.entries()){let r=!1;e.test(t)&&(r=!0),s.length>0&&a.tags.some(t=>s.includes(t))&&(r=!0),r&&i.push(t)}for(let t of i)this.cache.delete(t),a++;return this.stats.invalidations+=a,this.emit("invalidate",t,a),a}cleanupExpired(){let t=Date.now(),e=[];for(let[a,i]of this.cache.entries())t-i.timestamp>i.ttl&&e.push(a);for(let t of e)this.cache.delete(t);return e.length>0&&this.emit("cleanup",e.length),e.length}clear(){let t=this.cache.size;this.cache.clear(),this.emit("clear",t)}getStats(){let t=this.stats.hits+this.stats.misses,e=t>0?this.stats.hits/t:0,a=0,i=Date.now(),s=0;for(let t of this.cache.values())a+=this.calculateSize(t.data),i=Math.min(i,t.timestamp),s=Math.max(s,t.timestamp);return{size:this.cache.size,maxSize:this.maxSize,hits:this.stats.hits,misses:this.stats.misses,hitRate:Math.round(100*e)/100,totalSize:a,oldestEntry:this.cache.size>0?i:0,newestEntry:this.cache.size>0?s:0}}getDetailedStats(){let t=Date.now(),e=[];for(let[a,i]of this.cache.entries())e.push({key:a,accessCount:i.accessCount,lastAccessed:i.lastAccessed,age:t-i.timestamp});return e.sort((t,e)=>e.accessCount-t.accessCount)}async preload(t,e){let a=0;for(let i of t)if(!this.has(i))try{let t=await e(i);this.set(i,t,{ttl:2*this.defaultTtl}),a++}catch(t){this.emit("preload-error",i,t)}return this.emit("preload",a),a}async getOrSet(t,e,a={}){let i=this.get(t);if(null!==i)return i;try{let i=await e();return this.set(t,i,a),i}catch(e){throw this.emit("loader-error",t,e),e}}resetStats(){this.stats={hits:0,misses:0,evictions:0,invalidations:0},this.emit("stats-reset")}getEntryInfo(t){let e=this.normalizeKey(t),a=this.cache.get(e);return a?(Date.now(),{etag:a.etag,timestamp:a.timestamp,lastAccessed:a.lastAccessed,accessCount:a.accessCount,ttl:a.ttl,tags:a.tags}):null}destroy(){this.stopCleanupTimer(),this.clear(),this.removeAllListeners()}}class r extends s{constructor(){super(500,6e5)}invalidateFile(t){let e=[t,`${t}/*`,`*/${t.split("/").pop()}`],a=0;for(let t of e)a+=this.invalidate(t);return a}invalidateByType(t){switch(t){case"pages":return this.invalidate("pages/*");case"dynamic-content":return this.invalidate("dynamic-content/*");case"all":return this.clear(),-1;default:return 0}}async preloadCommonFiles(t){return this.preload(["pages/home.json","pages/portfolio.json","dynamic-content/portfolio/content.json","dynamic-content/newsletter/content.json"],t)}}let n=new r},98370:(t,e,a)=>{a.d(e,{runConcurrencyTests:()=>d});var i=a(47687),s=a(79523),r=a(73801),n=a(31075),o=a(79748),l=a.n(o),c=a(33873),h=a.n(c);class u{constructor(){this.testResults=[],this.testDir=h().join(process.cwd(),"data/test-temp"),this.fileManager=new i.a5(this.testDir,h().join(this.testDir,"locks")),this.cacheManager=new s.I8,this.validator=new r.sx,this.logger=new n.Fz({logDir:h().join(this.testDir,"logs"),logLevel:"debug"})}async runAllTests(){console.log("\uD83E\uDDEA Iniciando tests de concurrencia y atomicidad...\n");let t=Date.now();this.testResults=[];try{await this.setupTestEnvironment(),await this.testAtomicWrites(),await this.testFileLocking(),await this.testETagValidation(),await this.testConcurrentWrites(),await this.testConcurrentReads(),await this.testMixedOperations(),await this.testDataIntegrity(),await this.testRollbackOnError(),await this.testLoadHandling(),await this.testCachePerformance(),await this.testValidationUnderLoad()}catch(t){console.error("❌ Error durante tests:",t)}finally{await this.cleanupTestEnvironment()}let e=Date.now()-t,a=this.testResults.filter(t=>t.passed).length,i={suiteName:"Concurrency and Atomicity Tests",tests:this.testResults,totalTests:this.testResults.length,passedTests:a,totalDuration:e,summary:`${a}/${this.testResults.length} tests passed in ${e}ms`};return this.printTestResults(i),i}async setupTestEnvironment(){try{await l().mkdir(this.testDir,{recursive:!0}),await l().mkdir(h().join(this.testDir,"locks"),{recursive:!0}),await this.validator.loadAllSchemas(),console.log("✅ Entorno de tests configurado")}catch(t){throw Error(`Failed to setup test environment: ${t.message}`)}}async cleanupTestEnvironment(){try{await l().rm(this.testDir,{recursive:!0,force:!0}),await this.logger.destroy(),console.log("✅ Entorno de tests limpiado")}catch(t){console.warn("⚠️ Warning: Could not cleanup test environment:",t.message)}}async testAtomicWrites(){let t="Atomic Writes",e=Date.now();try{let a="atomic-test.json",i={id:"test",content:"atomic write test",timestamp:Date.now()},s=await this.fileManager.writeJSON(a,i,{createBackup:!0,ensureDirectory:!0}),r=await this.fileManager.readJSON(a),n=s.success&&JSON.stringify(r.data)===JSON.stringify(i)&&s.metadata.etag===r.metadata.etag;this.addTestResult(t,n,Date.now()-e,{wrote:i,read:r.data,etag:s.metadata.etag})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testFileLocking(){let t="File Locking",e=Date.now();try{let a="lock-test.json",i={id:"test1",writer:"process1"},s={id:"test2",writer:"process2"},r=this.fileManager.writeJSON(a,i,{timeout:5e3,ensureDirectory:!0}),n=this.fileManager.writeJSON(a,s,{timeout:5e3}),[o,l]=await Promise.all([r,n]),c=await this.fileManager.readJSON(a),h=(JSON.stringify(c.data)===JSON.stringify(i)||JSON.stringify(c.data)===JSON.stringify(s))&&o.success&&l.success;this.addTestResult(t,h,Date.now()-e,{result1:o.success,result2:l.success,finalData:c.data})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testETagValidation(){let t="ETag Validation",e=Date.now();try{let a="etag-test.json",i={id:"test",version:2},s=await this.fileManager.writeJSON(a,{id:"test",version:1},{ensureDirectory:!0}),r=!1;try{await this.fileManager.writeJSON(a,i,{validateEtag:"wrong-etag"})}catch(t){r="FileConflictError"===t.name}let n=await this.fileManager.writeJSON(a,i,{validateEtag:s.metadata.etag}),o=r&&n.success;this.addTestResult(t,o,Date.now()-e,{conflictDetected:r,secondWriteSuccess:n.success})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testConcurrentWrites(){let t="Concurrent Writes",e=Date.now();try{let a="concurrent-test.json",i=Array.from({length:10},(t,e)=>this.fileManager.writeJSON(`${a}-${e}`,{id:`test-${e}`,timestamp:Date.now(),writer:`process-${e}`},{ensureDirectory:!0})),s=await Promise.all(i),r=s.every(t=>t.success),n=0;for(let t=0;t<10;t++)try{(await this.fileManager.readJSON(`${a}-${t}`)).data.id===`test-${t}`&&n++}catch{}let o=r&&10===n;this.addTestResult(t,o,Date.now()-e,{operations:10,successful:s.filter(t=>t.success).length,filesVerified:n})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testConcurrentReads(){let t="Concurrent Reads",e=Date.now();try{let a="read-test.json",i={id:"test",content:"concurrent read test"};await this.fileManager.writeJSON(a,i,{ensureDirectory:!0});let s=Array.from({length:20},()=>this.fileManager.readJSON(a)),r=await Promise.all(s),n=r.every(t=>JSON.stringify(t.data)===JSON.stringify(i));this.addTestResult(t,n,Date.now()-e,{reads:20,successful:r.length})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testMixedOperations(){let t="Mixed Operations",e=Date.now();try{let a="mixed-test.json";await this.fileManager.writeJSON(a,{id:"test",counter:0},{ensureDirectory:!0});let i=[];for(let t=0;t<10;t++)i.push(this.fileManager.readJSON(a));for(let t=0;t<5;t++)i.push(this.fileManager.writeJSON(`${a}-write-${t}`,{id:`write-${t}`,timestamp:Date.now()}));let s=await Promise.all(i),r=s.slice(0,10).every(t=>t.data&&"test"===t.data.id),n=s.slice(10).every(t=>t.success),o=r&&n;this.addTestResult(t,o,Date.now()-e,{readsSuccessful:r,writesSuccessful:n,totalOperations:s.length})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testDataIntegrity(){let t="Data Integrity",e=Date.now();try{let a="integrity-test.json",i=!0;for(let t=0;t<50;t++){let e={id:`test-${t}`,iteration:t,timestamp:Date.now(),hash:this.generateSimpleHash(`test-${t}-${Date.now()}`)},s=await this.fileManager.writeJSON(a,e,{ensureDirectory:!0}),r=await this.fileManager.readJSON(a);if(!s.success||JSON.stringify(r.data)!==JSON.stringify(e)){i=!1;break}}this.addTestResult(t,i,Date.now()-e,{iterations:50,integrityMaintained:i})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testRollbackOnError(){let t="Rollback on Error",e=Date.now();try{let a="rollback-test.json",i={id:"test",version:1};await this.fileManager.writeJSON(a,i,{ensureDirectory:!0,createBackup:!0});let s=!1;try{await this.fileManager.writeJSON(a,{id:"test",version:2},{validateEtag:"wrong-etag"})}catch(e){let t=await this.fileManager.readJSON(a);s=JSON.stringify(t.data)===JSON.stringify(i)}this.addTestResult(t,s,Date.now()-e,{rollbackWorked:s})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testLoadHandling(){let t="Load Handling",e=Date.now();try{let a=[];for(let t=0;t<100;t++)if(t%3==0)a.push(this.fileManager.writeJSON(`load-test-${t}.json`,{id:`load-${t}`,timestamp:Date.now()},{ensureDirectory:!0}));else{let e=`load-test-${3*Math.floor(t/3)}.json`;a.push(this.fileManager.readJSON(e).catch(()=>({data:null})))}let i=await Promise.all(a),s=i.filter(t=>void 0!==t.success&&t.success||null!==t.data).length/i.length;this.addTestResult(t,s>.95,Date.now()-e,{operations:100,successRate:Math.round(100*s)/100,opsPerSecond:Math.round(100/((Date.now()-e)/1e3))})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testCachePerformance(){let t="Cache Performance",e=Date.now();try{let a={id:"cache-test",content:"test data"},i="cache-test-key";this.cacheManager.set(i,a);let s=this.cacheManager.get(i),r=0;for(let t=0;t<1e3;t++){this.cacheManager.set(`key-${t}`,{id:t,data:`test-${t}`});let e=this.cacheManager.get(`key-${t}`);e&&e.id===t&&r++}let n=this.cacheManager.getStats(),o=JSON.stringify(s)===JSON.stringify(a)&&1e3===r&&n.hitRate>.95;this.addTestResult(t,o,Date.now()-e,{hits:r,iterations:1e3,hitRate:n.hitRate,cacheSize:n.size})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}async testValidationUnderLoad(){let t="Validation Under Load",e=Date.now();try{let a={authors:[{id:"author1",name:"Test Author",role:"Writer"}],categories:[{id:"cat1",name:"Test Category",slug:"test-category"}],articles:[{id:"article1",title:"Test Article",author_id:"author1",category:"cat1",status:"published"}]},i=[];for(let t=0;t<50;t++)i.push(this.validator.validate(a,"newsletter",{migrationMode:!0,autoFix:!0}));let s=await Promise.all(i),r=s.filter(t=>t.valid||"low"!==t.stats.compatibilityLevel).length/s.length;this.addTestResult(t,r>.9,Date.now()-e,{validations:50,successRate:Math.round(100*r)/100,averageErrors:s.reduce((t,e)=>t+e.errors.length,0)/s.length})}catch(a){this.addTestResult(t,!1,Date.now()-e,a.message)}}addTestResult(t,e,a,i){this.testResults.push({name:t,passed:e,duration:a,error:e?void 0:i,details:e?i:void 0})}generateSimpleHash(t){let e=0;for(let a=0;a<t.length;a++)e=(e<<5)-e+t.charCodeAt(a),e&=e;return e.toString(16)}printTestResults(t){for(let e of(console.log("\n"+"=".repeat(80)),console.log("\uD83D\uDCCA RESULTADOS DE TESTS DE CONCURRENCIA"),console.log("=".repeat(80)),console.log(`
📈 RESUMEN: ${t.summary}`),console.log(`⏱️  Duraci\xf3n total: ${t.totalDuration}ms`),t.passedTests===t.totalTests?console.log("\uD83C\uDF89 TODOS LOS TESTS PASARON"):console.log(`⚠️  ${t.totalTests-t.passedTests} tests fallaron`),console.log("\n\uD83D\uDCCB DETALLES POR TEST:"),t.tests)){let t=e.passed?"✅":"❌",a=`${e.duration}ms`;if(console.log(`   ${t} ${e.name.padEnd(25)} (${a})`),!e.passed&&e.error&&console.log(`      Error: ${e.error}`),e.details){let t="object"==typeof e.details?Object.entries(e.details).slice(0,3).map(([t,e])=>`${t}: ${e}`).join(", "):String(e.details);console.log(`      ${t}`)}}console.log("\n"+"=".repeat(80))}}async function d(){let t=new u;return await t.runAllTests()}}};